{"version":3,"sources":["ClockCoordinates.js","Temperature.js","WeatherSymbol.js","Display.js","Weather.js","Hand.js","Error.js","TimeSelect.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["ClockCoordinates","time","hourDx","radius","radians","Math","PI","decimalHour","sin","hourDy","cos","minuteDx","minuteDy","symbolDx","size","symbolDy","isNight","_degreesDistance","d0","d1","distance","abs","rankFreeDirections","degreeCandidates","minuteDegrees","hourDegrees","degreesToRank","forEach","degrees","minDistance","hourDistance","min","sort","degree1","degree2","rank1","rank2","this","constructor","name","TypeError","getHours","getMinutes","getSeconds","Temperature","render","temperature","props","degreesCelsius","x","coordinates","y","className","React","Component","WeatherSymbol","url","symbol","width","height","href","Display","state","textWidth","textHeight","componentDidMount","boundingBox","textRef","current","getBBox","setState","coords","rw","rh","Fragment","rx","ry","ref","dominantBaseline","textAnchor","children","createRef","Weather","renderTemperatures","renderUs","filter","forecast","undefined","celsius","map","timestamp","key","renderWeathers","renderWindAndPrecipitation","precipitation_mm","minWind","maxWind","weather","wind_m_s","round","windString","console","debug","locale","navigator","language","userLanguage","precipitationNumberString","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","precipitationString","bestDegrees","now","windDegrees","windCoords","precipitationDegrees","precipitationCoords","getForecastsToRender","now_ms","getTime","start","Date","end","Object","entries","timestamp_ms","timestamp_date","push","Hand","x1","y1","x2","dx","y2","dy","strokeWidth","cx","cy","r","Error","Dialog","open","onClose","reload","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","TimeSelect","NativeSelect","style","position","right","top","value","onChange","event","onSetTimespan","target","Clock","_getInitialState","geolocation","progress","error","ReactGA","exception","description","fatal","startGeolocationIfNeeded","componentDidUpdate","forecastIsCurrent","download_weather","position_age_ms","positionTimestamp","log","getCurrentPosition","setPosition","geoError","latitude","longitude","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","atan2","sqrt","deg","metadata","forecastMetadata","ageMs","kmDistance","self","fetch","then","response","ok","status","text","weatherXmlString","parseWeatherXml","catch","message","allPrognoses","window","DOMParser","parseFromString","getElementsByTagName","length","forecasts","i","prognosis","from","attributes","to","dh","span_h","symbolNodes","symbolNumber","number","celsiusNodes","celsiusValue","parseFloat","windNodes","windValue","mps","precipitationNodes","maxAttribute","maxvalue","expectedAttribute","precipitationValue","location","bind","renderHands","nowCoords","xmlns","version","viewBox","xlinkHref","process","getClockContents","nowOrTomorrow","initialize","set","anonymizeIp","pageview","pathname","search","App","setTimeToNow","handleVisibilityChange","isVisible","timespan","tomorrow","setDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","type","Boolean","hostname","match","protocol","substring","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fafc93c4.chunk.js","sourcesContent":["class ClockCoordinates {\n  constructor (time) {\n    if (typeof time === 'number') {\n      this.decimalHour = time\n    } else if (typeof time === 'object' && time.constructor.name === 'Date') {\n      this.decimalHour = time.getHours() + time.getMinutes() / 60.0 + time.getSeconds() / 3600.0\n    } else {\n      throw new TypeError('Expected number (decimal hours) or Date')\n    }\n  }\n\n  hourDx = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return Math.sin(radians) * radius\n  }\n\n  hourDy = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return -Math.cos(radians) * radius\n  }\n\n  minuteDx = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour % 12.0)\n    return Math.sin(radians) * radius\n  }\n\n  minuteDy = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour % 12.0)\n    return -Math.cos(radians) * radius\n  }\n\n  symbolDx = (radius, size) => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return Math.sin(radians) * radius - (size - 1) / 2\n  }\n\n  symbolDy = (radius, size) => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return -Math.cos(radians) * radius - (size - 1) / 2\n  }\n\n  isNight = () => {\n    // FIXME: Actually compute this based on latitude and longitude?\n    return this.decimalHour < 7 || this.decimalHour > 20\n  }\n\n  _degreesDistance = (d0, d1) => {\n    const distance = Math.abs(d1 - d0)\n    if (distance > 180) {\n      return 360 - distance\n    }\n    return distance\n  }\n\n  /**\n   * Return an array of directions (0-360 degrees). The first direction\n   * is the one that is most clear of the clock hands, second one is second\n   * most clear and so on.\n   */\n  rankFreeDirections = () => {\n    const degreeCandidates = [0, 90, 180, 270]\n    const minuteDegrees = 360 * (this.decimalHour % 1.0)\n    const hourDegrees = 360 * ((this.decimalHour % 12.0) / 12.0)\n\n    let degreesToRank = {}\n    degreeCandidates.forEach(degrees => {\n      const minDistance = this._degreesDistance(degrees, minuteDegrees)\n      const hourDistance = this._degreesDistance(degrees, hourDegrees)\n      degreesToRank[degrees] = Math.min(minDistance, hourDistance)\n    })\n\n    degreeCandidates.sort((degree1, degree2) => {\n      const rank1 = degreesToRank[degree1]\n      const rank2 = degreesToRank[degree2]\n      if (rank1 < rank2) {\n        return 1\n      }\n      if (rank1 > rank2) {\n        return -1\n      }\n      return 0\n    })\n\n    return degreeCandidates\n  }\n}\n\nexport default ClockCoordinates\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Temperature.css'\nimport ClockCoordinates from './ClockCoordinates'\n\nconst DISTANCE_FROM_CENTER = 39\n\nclass Temperature extends React.Component {\n  render = () => {\n    // Truncate decimals\n    const temperature = this.props.degreesCelsius | 0\n\n    const x = this.props.coordinates.hourDx(DISTANCE_FROM_CENTER)\n    const y = this.props.coordinates.hourDy(DISTANCE_FROM_CENTER)\n\n    return (\n      <text className='hour' x={x} y={y}>\n        {temperature}&deg;\n      </text>\n    )\n  }\n}\n\nTemperature.propTypes = {\n  degreesCelsius: PropTypes.number,\n  coordinates: PropTypes.instanceOf(ClockCoordinates)\n}\n\nexport default Temperature\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ClockCoordinates from './ClockCoordinates'\n\nconst DISTANCE_FROM_CENTER = 29\nconst SIZE = 10\n\nclass WeatherSymbol extends React.Component {\n  render = () => {\n    // Note that we *could* download an SVG weather symbol, but that doesn't\n    // work on Firefox 38.0.5 so we do PNG instead. And since cell phone screens\n    // are what we're aiming for, PNG should be fine.\n    const url =\n      'https://api.met.no/weatherapi/weathericon/1.1/?symbol=' +\n      this.props.symbol +\n      ';content_type=image/png;is_night=' +\n      (this.props.coordinates.isNight() ? 1 : 0)\n\n    const x = this.props.coordinates.symbolDx(DISTANCE_FROM_CENTER, SIZE)\n    const y = this.props.coordinates.symbolDy(DISTANCE_FROM_CENTER, SIZE)\n\n    return <image className='symbol' x={x} y={y} width={SIZE} height={SIZE} href={url} />\n  }\n}\n\nWeatherSymbol.propTypes = {\n  coordinates: PropTypes.instanceOf(ClockCoordinates),\n  symbol: PropTypes.string\n}\n\nexport default WeatherSymbol\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Display.css'\n\nimport ClockCoordinates from './ClockCoordinates'\n\nconst WIND_TEXT_RADIUS = 13\nconst WINDBOX_SCALE = 1.2\n\n/**\n * This is supposed to mimic a display on the clock face.\n */\nclass Display extends React.Component {\n  state = {\n    textWidth: 0,\n    textHeight: 0\n  }\n\n  constructor (props) {\n    super(props)\n    this.textRef = React.createRef()\n  }\n\n  componentDidMount = () => {\n    const boundingBox = this.textRef.current.getBBox()\n    this.setState({\n      textWidth: boundingBox.width,\n      textHeight: boundingBox.height\n    })\n  }\n\n  render = () => {\n    const x = this.props.coords.hourDx(WIND_TEXT_RADIUS)\n    const y = this.props.coords.hourDy(WIND_TEXT_RADIUS)\n\n    const rw = this.state.textWidth * WINDBOX_SCALE\n    const rh = this.state.textHeight * WINDBOX_SCALE\n\n    return (\n      <React.Fragment>\n        <rect x={x - rw / 2} y={y - rh / 2} width={rw} height={rh} rx='2' ry='2' className='wind' />\n        <text\n          ref={this.textRef}\n          x={x}\n          y={y}\n          className='wind'\n          dominantBaseline='middle'\n          textAnchor='middle'\n        >\n          {this.props.children}\n        </text>\n      </React.Fragment>\n    )\n  }\n}\n\nDisplay.propTypes = {\n  coordinates: PropTypes.instanceOf(ClockCoordinates)\n}\n\nexport default Display\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Temperature from './Temperature.js'\nimport WeatherSymbol from './WeatherSymbol.js'\nimport Display from './Display.js'\nimport ClockCoordinates from './ClockCoordinates.js'\n\n/**\n * This is what the clock shows after forecasts have been downloaded,\n * up to and including the hour and minute hands.\n */\nclass Weather extends React.Component {\n  renderTemperatures = renderUs => {\n    return renderUs\n      .filter(forecast => forecast.celsius !== undefined)\n      .map(forecast => {\n        const coords = new ClockCoordinates(forecast.timestamp)\n        return (\n          <Temperature\n            key={`hour-${coords.decimalHour}`}\n            coordinates={coords}\n            degreesCelsius={forecast.celsius}\n          />\n        )\n      })\n  }\n\n  renderWeathers = renderUs => {\n    return renderUs\n      .filter(forecast => forecast.symbol !== undefined)\n      .map(forecast => {\n        const coords = new ClockCoordinates(forecast.timestamp)\n\n        return (\n          <WeatherSymbol\n            key={`weather-${coords.decimalHour}`}\n            coordinates={coords}\n            symbol={forecast.symbol}\n          />\n        )\n      })\n  }\n\n  renderWindAndPrecipitation = renderUs => {\n    let precipitation_mm = 0\n    let minWind = null\n    let maxWind = null\n\n    renderUs.forEach(weather => {\n      if (minWind == null || minWind > weather.wind_m_s) {\n        minWind = weather.wind_m_s\n      }\n      if (maxWind == null || maxWind < weather.wind_m_s) {\n        maxWind = weather.wind_m_s\n      }\n      if (weather.precipitation_mm !== undefined) {\n        precipitation_mm += weather.precipitation_mm\n      }\n    })\n\n    minWind = Math.round(minWind)\n    maxWind = Math.round(maxWind)\n    const windString = minWind === maxWind ? `${minWind} m/s` : `${minWind}-${maxWind} m/s`\n    console.debug(`Wind: ${windString}`)\n\n    const locale = navigator.language || navigator.userLanguage\n    const precipitationNumberString = new Intl.NumberFormat(locale, {\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 1\n    }).format(precipitation_mm)\n\n    const precipitationString = `${precipitationNumberString}mm`\n    console.debug(`Precipitation: ${precipitationString}`)\n\n    const nowCoords = new ClockCoordinates(this.props.now)\n    const bestDegrees = nowCoords.rankFreeDirections()\n\n    // Where do we draw the wind?\n    const windDegrees = bestDegrees[0]\n    const windCoords = new ClockCoordinates((12.0 * windDegrees) / 360.0)\n\n    const precipitationDegrees = bestDegrees[1]\n    const precipitationCoords = new ClockCoordinates((12.0 * precipitationDegrees) / 360.0)\n\n    // FIXME: Render both wind and precipitation in the same display?\n    return (\n      <React.Fragment>\n        <Display coords={windCoords}>{windString}</Display>\n        <Display coords={precipitationCoords}>{precipitationString}</Display>\n      </React.Fragment>\n    )\n  }\n\n  getForecastsToRender = () => {\n    const renderUs = []\n\n    const now_ms = this.props.now.getTime()\n    const start = new Date(now_ms + 0.75 * 3600 * 1000)\n    const end = new Date(now_ms + 11.75 * 3600 * 1000)\n\n    // eslint-disable-next-line\n    for (const [timestamp_ms, forecast] of Object.entries(this.props.forecast)) {\n      const timestamp_date = new Date(timestamp_ms)\n\n      if (timestamp_date < start) {\n        continue\n      }\n\n      if (timestamp_date > end) {\n        continue\n      }\n\n      renderUs.push(forecast)\n    }\n\n    console.debug(renderUs)\n    return renderUs\n  }\n\n  render = () => {\n    const renderUs = this.getForecastsToRender()\n    return (\n      <React.Fragment>\n        {this.renderTemperatures(renderUs)}\n        {this.renderWeathers(renderUs)}\n        {this.renderWindAndPrecipitation(renderUs)}\n      </React.Fragment>\n    )\n  }\n}\n\nWeather.propTypes = {\n  forecast: PropTypes.object,\n  now: PropTypes.instanceOf(Date)\n}\n\nexport default Weather\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Hand.css'\n\nclass Hand extends React.Component {\n  // FIXME: Hands should protrude 2 units in the wrong direction as well\n  render = () => {\n    return (\n      <React.Fragment>\n        <line\n          className='hand shadow'\n          x1='0'\n          y1='0'\n          x2={this.props.dx}\n          y2={this.props.dy}\n          strokeWidth={this.props.width}\n        />\n        <circle className='shadow' cx='0' cy='0' r='2' />\n\n        <line\n          className='hand'\n          x1='0'\n          y1='0'\n          x2={this.props.dx}\n          y2={this.props.dy}\n          strokeWidth={this.props.width}\n        />\n        <circle cx='0' cy='0' r='2' />\n      </React.Fragment>\n    )\n  }\n}\n\nHand.propTypes = {\n  width: PropTypes.number,\n  dx: PropTypes.number,\n  dy: PropTypes.number\n}\n\nexport default Hand\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\n\nclass Error extends React.Component {\n  render = () => {\n    // Inspired by: https://material-ui.com/components/dialogs/#alerts\n    return (\n      <Dialog\n        open\n        onClose={this.props.reload}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>{this.props.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>{this.props.children}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.reload} color='primary' autoFocus>\n            Retry\n          </Button>\n          {/* FIXME: Add button for reporting an issue? */}\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n\nError.propTypes = {\n  title: PropTypes.string.isRequired,\n  reload: PropTypes.func.isRequired\n}\n\nexport default Error\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport NativeSelect from '@material-ui/core/NativeSelect'\n\nclass TimeSelect extends React.Component {\n  render = () => {\n    const topRight = { position: 'absolute', right: '0px', top: '0px' }\n\n    // Inspired by: https://material-ui.com/components/selects/#native-select\n    return (\n      <NativeSelect style={topRight} value={this.props.value} onChange={this.onChange}>\n        <option value={'now'}>Now</option>\n        <option value={'tomorrow'}>Tomorrow</option>\n      </NativeSelect>\n    )\n  }\n\n  onChange = event => {\n    this.props.onSetTimespan(event.target.value)\n  }\n}\n\nTimeSelect.propTypes = {\n  onSetTimespan: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired\n}\n\nexport default TimeSelect\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ReactGA from 'react-ga'\n\nimport './Clock.css'\n\nimport Weather from './Weather.js'\nimport Hand from './Hand.js'\nimport Error from './Error.js'\nimport ClockCoordinates from './ClockCoordinates.js'\nimport TimeSelect from './TimeSelect'\n\nconst HOUR_HAND_LENGTH = 23\nconst MINUTE_HAND_LENGTH = 34\n\n/** Cache positions for this long */\nconst POSITION_CACHE_MS = 5 * 60 * 1000\n\n/** Cache forecasts for this long */\nconst FORECAST_CACHE_MS = 2 * 60 * 60 * 1000\n\n/** If we move less than this, assume forecast is still valid */\nconst FORECAST_CACHE_KM = 5\n\nclass Clock extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = this._getInitialState()\n  }\n\n  _getInitialState = () => {\n    if (navigator.geolocation) {\n      // FIXME: Invalidate forecast if it's too old (and decide what \"too old\" means)\n      return {\n        now: this.props.now,\n        progress: null,\n        error: null\n      }\n    }\n\n    ReactGA.exception({\n      description: 'Geolocation unsupported',\n      fatal: true\n    })\n\n    return {\n      now: this.props.now,\n      progress: null,\n\n      // FIXME: Add a link for contacting me with browser information\n      error: (\n        <Error title='Geolocation unsupported' reload={this.props.reload}>\n          Please try <a href='https://getfirefox.com'>another browser</a>.\n        </Error>\n      )\n    }\n  }\n\n  componentDidMount = () => {\n    this.startGeolocationIfNeeded()\n  }\n\n  componentDidUpdate = () => {\n    if (this.props.now !== this.state.now) {\n      this.setState(this._getInitialState())\n    }\n\n    if (this.startGeolocationIfNeeded()) {\n      // If / when we get the new position, that will in turn trigger a forecast\n      // update, so our work here is done.\n      return\n    }\n\n    if (this.state.progress) {\n      // Something is already happening, don't interrupt it by getting a new forecast\n      return\n    }\n\n    if (this.forecastIsCurrent()) {\n      // Forecast already current, never mind\n      return\n    }\n\n    this.download_weather()\n  }\n\n  startGeolocationIfNeeded = () => {\n    if (this.state.progress) {\n      // Something is already in progress, never mind\n      return false\n    }\n\n    if (this.state.error) {\n      // Something has gone wrong, never mind\n      return false\n    }\n\n    if (this.state.position) {\n      const position_age_ms = new Date() - this.state.positionTimestamp\n\n      if (position_age_ms < POSITION_CACHE_MS) {\n        // Already know where we are, never mind\n        console.debug(`Retaining cached position of ${position_age_ms}ms age`)\n        return false\n      }\n    }\n\n    console.log('Geolocating...')\n    this.setState({\n      progress: <text className='progress'>Locating phone...</text>\n    })\n    navigator.geolocation.getCurrentPosition(this.setPosition, this.geoError)\n\n    return true\n  }\n\n  setPosition = position => {\n    const latitude = position.coords.latitude\n    const longitude = position.coords.longitude\n    console.log(`got position: ${latitude} ${longitude}`)\n\n    this.setState({\n      position: position.coords,\n      positionTimestamp: new Date()\n    })\n\n    if (!this.forecastIsCurrent()) {\n      this.download_weather()\n    }\n  }\n\n  // From: https://stackoverflow.com/a/27943/473672\n  getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\n    const EARTH_RADIUS_KM = 6371\n    const dLat = this.deg2rad(lat2 - lat1)\n    const dLon = this.deg2rad(lon2 - lon1)\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.deg2rad(lat1)) *\n        Math.cos(this.deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n\n    return EARTH_RADIUS_KM * c\n  }\n\n  deg2rad = deg => {\n    return deg * (Math.PI / 180)\n  }\n\n  forecastIsCurrent = () => {\n    if (!this.state.forecast) {\n      // No forecast at all, that's not current\n      return false\n    }\n\n    const metadata = this.state.forecastMetadata\n    const ageMs = new Date() - metadata.timestamp\n    if (ageMs > FORECAST_CACHE_MS) {\n      // Forecast too old, that's not current\n      return false\n    }\n\n    const kmDistance = this.getDistanceFromLatLonInKm(\n      metadata.latitude,\n      metadata.longitude,\n      this.state.position.latitude,\n      this.state.position.longitude\n    )\n    if (kmDistance > FORECAST_CACHE_KM) {\n      // Forecast from too far away, that's not current\n      return false\n    }\n\n    console.debug(\n      `Forecast considered current: ${ageMs}ms old and ${kmDistance}km away`\n    )\n    return true\n  }\n\n  download_weather = () => {\n    const latitude = this.state.position.latitude\n    const longitude = this.state.position.longitude\n\n    this.setState({\n      progress: <text className='progress'>Downloading weather...</text>\n    })\n\n    const url = `https://api-met-no-proxy.appspot.com/weatherapi/locationforecast/1.9/?lat=${latitude};lon=${longitude}`\n    console.log('Getting weather from: ' + url)\n\n    const self = this\n\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Response code from upstream: ${response.status}`)\n        }\n        return response.text()\n      })\n      .then(weatherXmlString => {\n        const forecast = self.parseWeatherXml(weatherXmlString)\n\n        self.setState({\n          forecast: forecast,\n          forecastMetadata: {\n            // FIXME: Rather than the current timestamp, maybe track when yr.no\n            // thinks the next forecast will be available? That information is\n            // available in the XML.\n            timestamp: new Date(),\n            latitude: latitude,\n            longitude: longitude\n          }\n        })\n      })\n      .catch(error => {\n        ReactGA.exception({\n          description: `Downloading weather failed: ${error.message}`,\n          fatal: !this.state.forecast\n        })\n\n        this.setState({\n          error: (\n            <Error\n              title='Downloading weather failed'\n              reload={this.props.reload}\n            >\n              {error.message}\n            </Error>\n          )\n        })\n      })\n  }\n\n  /* Parses weather XML from yr.no into a weather object that maps timestamps (in\n   * seconds since the epoch) to forecasts. A forecast has these fields:\n   *\n   * .celsius: The forecasted temperatures in centigrades\n   *\n   * .wind_m_s: The forecasted wind speed\n   *\n   * .symbol: The weather symbol index. Resolve using\n   *         https://api.yr.no/weatherapi/weathericon\n   */\n  parseWeatherXml = weatherXmlString => {\n    const weatherXml = new window.DOMParser().parseFromString(\n      weatherXmlString,\n      'text/xml'\n    )\n    const allPrognoses = weatherXml.getElementsByTagName('time')\n    console.log('Parsing ' + allPrognoses.length + ' prognoses...')\n\n    const forecasts = {}\n    for (let i = 0; i < allPrognoses.length; i++) {\n      const prognosis = allPrognoses[i]\n\n      const from = new Date(prognosis.attributes.from.value)\n      const to = new Date(prognosis.attributes.to.value)\n      const dh = (to.getTime() - from.getTime()) / (3600 * 1000)\n      const timestamp = new Date((from.getTime() + to.getTime()) / 2)\n\n      let forecast = forecasts[timestamp]\n      if (!forecast) {\n        forecast = {}\n      }\n\n      forecast.timestamp = timestamp\n\n      if (forecast.span_h !== undefined && forecast.span_h <= dh) {\n        // There's already better data here\n        continue\n      }\n\n      forecast.span_h = dh\n\n      const symbolNodes = prognosis.getElementsByTagName('symbol')\n      if (symbolNodes && symbolNodes.length > 0) {\n        const symbolNumber = symbolNodes[0].attributes.number.value\n        forecast.symbol = symbolNumber\n      }\n\n      const celsiusNodes = prognosis.getElementsByTagName('temperature')\n      if (celsiusNodes && celsiusNodes.length > 0) {\n        const celsiusValue = celsiusNodes[0].attributes.value.value\n        forecast.celsius = parseFloat(celsiusValue)\n      }\n\n      const windNodes = prognosis.getElementsByTagName('windSpeed')\n      if (windNodes && windNodes.length > 0) {\n        const windValue = windNodes[0].attributes.mps.value\n        forecast.wind_m_s = parseFloat(windValue)\n      }\n\n      const precipitationNodes = prognosis.getElementsByTagName('precipitation')\n      if (precipitationNodes && precipitationNodes.length > 0) {\n        const maxAttribute = precipitationNodes[0].attributes.maxvalue\n        const expectedAttribute = precipitationNodes[0].attributes.value\n        const precipitationValue =\n          maxAttribute === undefined\n            ? expectedAttribute.value\n            : maxAttribute.value\n        forecast.precipitation_mm = parseFloat(precipitationValue)\n      }\n\n      forecasts[timestamp] = forecast\n    }\n\n    console.log(forecasts)\n    return forecasts\n  }\n\n  geoError = error => {\n    console.log('Geolocation failed')\n    ReactGA.exception({\n      description: `Geolocation failed: ${error.message}`,\n      fatal: !this.state.forecast\n    })\n    this.setState({\n      // FIXME: Add a report-problem link?\n      // FIXME: Make the error message text clickable and link it to a Google search\n      // Reload trickery from: https://stackoverflow.com/a/10840058/473672\n\n      // Note that at least on desktop Firefox 69.0 for Mac, this JS-triggered reload\n      // won't re-ask the positioning question, but if the user manually reloads that\n      // will re-ask the question.\n      error: (\n        <Error\n          title={error.message}\n          reload={window.location.reload.bind(window.location, [true])}\n        >\n          If you are asked whether to allow the Weather Clock to know your\n          current location, please say \"yes\".\n        </Error>\n      )\n    })\n  }\n\n  renderHands = () => {\n    const nowCoords = new ClockCoordinates(this.state.now)\n\n    // FIXME: This doubles the center circle shadow, maybe draw\n    // the center circle once here to get us only one of those?\n    return (\n      <React.Fragment>\n        <Hand\n          width={2.5}\n          dx={nowCoords.hourDx(HOUR_HAND_LENGTH)}\n          dy={nowCoords.hourDy(HOUR_HAND_LENGTH)}\n        />\n        <Hand\n          width={2}\n          dx={nowCoords.minuteDx(MINUTE_HAND_LENGTH)}\n          dy={nowCoords.minuteDy(MINUTE_HAND_LENGTH)}\n        />\n      </React.Fragment>\n    )\n  }\n\n  render = () => {\n    return (\n      <React.Fragment>\n        <svg\n          id='weatherclock'\n          xmlns='http://www.w3.org/2000/svg'\n          version='1.1'\n          viewBox='-50 -50 100 100'\n        >\n          <image\n            x='-50'\n            y='-50'\n            width='100'\n            height='100'\n            xlinkHref={process.env.PUBLIC_URL + '/clock-frame.png'}\n          />\n\n          {this.getClockContents()}\n        </svg>\n        {this.state.error}\n        {this.state.forecast ? (\n          <TimeSelect\n            value={this.props.nowOrTomorrow}\n            onSetTimespan={this.props.onSetTimespan}\n          />\n        ) : null}\n      </React.Fragment>\n    )\n  }\n\n  getClockContents = () => {\n    if (this.state.forecast) {\n      if (this.props.nowOrTomorrow === 'tomorrow') {\n        return (\n          <React.Fragment>\n            <Weather forecast={this.state.forecast} now={this.state.now} />\n            <text className='tomorrow'>Tomorrow</text>\n          </React.Fragment>\n        )\n      } else {\n        // Now\n        return (\n          <React.Fragment>\n            <Weather forecast={this.state.forecast} now={this.state.now} />\n            {this.renderHands()}\n          </React.Fragment>\n        )\n      }\n    }\n\n    if (this.state.error) {\n      // These hands will show up behind the error dialog\n      return this.renderHands()\n    }\n\n    if (this.state.progress) {\n      return this.state.progress\n    }\n\n    // Most likely the initial state\n    return null\n  }\n}\n\nClock.propTypes = {\n  now: PropTypes.instanceOf(Date).isRequired,\n  reload: PropTypes.func.isRequired,\n  nowOrTomorrow: PropTypes.string.isRequired,\n  onSetTimespan: PropTypes.func.isRequired\n}\n\nexport default Clock\n","import React from 'react'\nimport './App.css'\n\nimport Clock from './Clock.js'\n\nimport PageVisibility from 'react-page-visibility'\n\nimport ReactGA from 'react-ga'\nif (process.env.NODE_ENV === 'production') {\n  // To prevent bad data from dev and test runs we only enable Google Analytics\n  // in production\n  ReactGA.initialize('UA-59702036-2')\n\n  // IPs are personally identifiable according to GDPR:\n  // https://eugdprcompliant.com/personal-data/\n  ReactGA.set({ anonymizeIp: true })\n}\nReactGA.pageview(window.location.pathname + window.location.search)\n\nclass App extends React.Component {\n  state = {\n    now: new Date(),\n    nowOrTomorrow: 'now'\n  }\n\n  setTimeToNow = () => {\n    this.setState({\n      now: new Date(),\n      nowOrTomorrow: 'now'\n    })\n  }\n\n  handleVisibilityChange = isVisible => {\n    console.debug(`Page visibility changed: ${isVisible}`)\n    if (isVisible) {\n      this.setTimeToNow()\n    }\n  }\n\n  onSetTimespan = timespan => {\n    if (timespan === 'now') {\n      this.setState({\n        nowOrTomorrow: 'now',\n        now: new Date()\n      })\n    } else {\n      let tomorrow = new Date()\n      tomorrow.setDate(tomorrow.getDate() + 1 /* days */)\n      tomorrow.setHours(7)\n      tomorrow.setMinutes(0)\n      tomorrow.setSeconds(0)\n      tomorrow.setMilliseconds(0)\n\n      this.setState({\n        nowOrTomorrow: 'tomorrow',\n        now: tomorrow\n      })\n    }\n  }\n\n  render = () => {\n    return (\n      <PageVisibility onChange={this.handleVisibilityChange}>\n        <div className='App'>\n          <Clock\n            now={this.state.now}\n            reload={this.setTimeToNow}\n            onSetTimespan={this.onSetTimespan}\n            nowOrTomorrow={this.state.nowOrTomorrow}\n          />\n\n          {/*\n          If you add a Weatherclock launcher to your home screen on an iPhone,\n          the page opened will not be in a web-browser (or at least look like\n          it's not).\n\n          So we add a reload button of our own here.\n          */}\n          <button type='button' onClick={this.setTimeToNow}>\n            Update forecast\n          </button>\n\n          <p>\n            Weather forecast from <a href='yr.no'>yr.no</a>, delivered by the{' '}\n            <a href='https://met.no/English/'>\n              Norwegian Meteorological Institute\n            </a>{' '}\n            and the <a href='https://www.nrk.no/'>NRK</a>.\n          </p>\n\n          <p>\n            <a\n              href={`https://github.com/walles/weatherclock/tree/${process.env.REACT_APP_GIT_SHA}`}\n            >\n              Source code on GitHub\n            </a>\n          </p>\n        </div>\n      </PageVisibility>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// Redirect to https, this helps with positioning in some circumstances\nconst protocol = window.location.protocol\nif (protocol === 'http:' && window.location.hostname !== 'localhost') {\n  // From http://stackoverflow.com/a/4723302/473672\n  window.location.href = 'https:' + window.location.href.substring(protocol.length)\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'))\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister()\n}\n"],"sourceRoot":""}