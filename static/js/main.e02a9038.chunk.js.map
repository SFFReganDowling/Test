{"version":3,"sources":["ClockCoordinates.js","Temperature.js","WeatherSymbol.js","Display.js","Weather.js","Hand.js","Error.js","TimeSelect.tsx","Clock.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ClockCoordinates","time","hourDx","radius","radians","Math","PI","decimalHour","sin","hourDy","cos","minuteDx","minuteDy","symbolDx","size","symbolDy","_degreesDistance","d0","d1","distance","abs","rankFreeDirections","degreeCandidates","minuteDegrees","hourDegrees","degreesToRank","forEach","degrees","minDistance","hourDistance","min","sort","degree1","degree2","rank1","rank2","this","constructor","name","TypeError","getHours","getMinutes","getSeconds","Temperature","render","temperature","props","degreesCelsius","x","coordinates","y","className","React","Component","WeatherSymbol","url","process","symbol_code","width","height","href","Display","state","textWidth","textHeight","componentDidMount","boundingBox","textRef","current","getBBox","setState","coords","rw","rh","Fragment","rx","ry","ref","dominantBaseline","textAnchor","children","createRef","Weather","renderTemperatures","renderUs","filter","forecast","undefined","celsius","map","timestamp","key","renderWeathers","renderWindAndPrecipitation","precipitation_mm","minWind","maxWind","weather","wind_m_s","round","windString","console","debug","locale","navigator","language","userLanguage","precipitationNumberString","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","precipitationString","bestDegrees","now","windDegrees","windCoords","precipitationDegrees","precipitationCoords","getForecastsToRender","now_ms","getTime","start","Date","end","entries","timestamp_ms","timestamp_date","push","Hand","x1","y1","x2","dx","y2","dy","strokeWidth","cx","cy","r","Error","Dialog","open","onClose","reload","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","NamedStartTime","daysFromNow","_startTime","_name","_daysFromNow","otherDay","setDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","dayname","toLocaleDateString","weekday","s","firstCodeUnit","toUpperCase","slice","capitalizeFirstLetter","TimeSelect","options","i","value","String","NativeSelect","style","position","right","top","onChange","event","onSetStartTime","parseInt","target","Clock","_getInitialState","geolocation","startTime","progress","error","ReactGA","exception","description","fatal","startGeolocationIfNeeded","componentDidUpdate","forecastIsCurrent","download_weather","position_age_ms","positionTimestamp","log","getCurrentPosition","setPosition","geoError","latitude","longitude","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","atan2","sqrt","deg","metadata","forecastMetadata","ageMs","kmDistance","self","fetch","then","response","ok","status","text","weatherXmlString","parseWeatherXml","catch","message","allPrognoses","window","DOMParser","parseFromString","getElementsByTagName","length","forecasts","Map","prognosis","from","attributes","getNamedItem","to","dh","get","span_h","symbolNodes","celsiusNodes","celsiusValue","parseFloat","windNodes","windValue","precipitationNodes","maxAttribute","expectedAttribute","precipitationValue","set","location","bind","renderHands","nowCoords","xmlns","version","viewBox","xlinkHref","getClockContents","initialize","anonymizeIp","pageview","pathname","search","App","setTimeToNow","handleVisibilityChange","isVisible","assert","type","Boolean","hostname","match","protocol","substring","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e02a9038.chunk.js","sourcesContent":["class ClockCoordinates {\n  constructor (time) {\n    if (typeof time === 'number') {\n      this.decimalHour = time\n    } else if (typeof time === 'object' && time.constructor.name === 'Date') {\n      this.decimalHour =\n        time.getHours() + time.getMinutes() / 60.0 + time.getSeconds() / 3600.0\n    } else {\n      throw new TypeError('Expected number (decimal hours) or Date')\n    }\n  }\n\n  hourDx = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return Math.sin(radians) * radius\n  }\n\n  hourDy = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return -Math.cos(radians) * radius\n  }\n\n  minuteDx = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour % 12.0)\n    return Math.sin(radians) * radius\n  }\n\n  minuteDy = radius => {\n    const radians = 2 * Math.PI * (this.decimalHour % 12.0)\n    return -Math.cos(radians) * radius\n  }\n\n  symbolDx = (radius, size) => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return Math.sin(radians) * radius - (size - 1) / 2\n  }\n\n  symbolDy = (radius, size) => {\n    const radians = 2 * Math.PI * (this.decimalHour / 12.0)\n    return -Math.cos(radians) * radius - (size - 1) / 2\n  }\n\n  _degreesDistance = (d0, d1) => {\n    const distance = Math.abs(d1 - d0)\n    if (distance > 180) {\n      return 360 - distance\n    }\n    return distance\n  }\n\n  /**\n   * Return an array of directions (0-360 degrees). The first direction\n   * is the one that is most clear of the clock hands, second one is second\n   * most clear and so on.\n   */\n  rankFreeDirections = () => {\n    const degreeCandidates = [0, 90, 180, 270]\n    const minuteDegrees = 360 * (this.decimalHour % 1.0)\n    const hourDegrees = 360 * ((this.decimalHour % 12.0) / 12.0)\n\n    let degreesToRank = {}\n    degreeCandidates.forEach(degrees => {\n      const minDistance = this._degreesDistance(degrees, minuteDegrees)\n      const hourDistance = this._degreesDistance(degrees, hourDegrees)\n      degreesToRank[degrees] = Math.min(minDistance, hourDistance)\n    })\n\n    degreeCandidates.sort((degree1, degree2) => {\n      const rank1 = degreesToRank[degree1]\n      const rank2 = degreesToRank[degree2]\n      if (rank1 < rank2) {\n        return 1\n      }\n      if (rank1 > rank2) {\n        return -1\n      }\n      return 0\n    })\n\n    return degreeCandidates\n  }\n}\n\nexport default ClockCoordinates\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Temperature.css'\nimport ClockCoordinates from './ClockCoordinates'\n\nconst DISTANCE_FROM_CENTER = 39\n\nclass Temperature extends React.Component {\n  render = () => {\n    // Truncate decimals\n    const temperature = this.props.degreesCelsius | 0\n\n    const x = this.props.coordinates.hourDx(DISTANCE_FROM_CENTER)\n    const y = this.props.coordinates.hourDy(DISTANCE_FROM_CENTER)\n\n    return (\n      <text className='hour' x={x} y={y}>\n        {temperature}&deg;\n      </text>\n    )\n  }\n}\n\nTemperature.propTypes = {\n  degreesCelsius: PropTypes.number,\n  coordinates: PropTypes.instanceOf(ClockCoordinates)\n}\n\nexport default Temperature\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ClockCoordinates from './ClockCoordinates'\n\nconst DISTANCE_FROM_CENTER = 29\nconst SIZE = 10\n\nclass WeatherSymbol extends React.Component {\n  render = () => {\n    // Note that we *could* download an SVG weather symbol, but that doesn't\n    // work on Firefox 38.0.5 so we do PNG instead. And since cell phone screens\n    // are what we're aiming for, PNG should be fine.\n    const url = `${process.env.PUBLIC_URL}/api-met-no-weathericons/png/${this.props.symbol_code}.png`\n\n    const x = this.props.coordinates.symbolDx(DISTANCE_FROM_CENTER, SIZE)\n    const y = this.props.coordinates.symbolDy(DISTANCE_FROM_CENTER, SIZE)\n\n    return (\n      <image\n        className='symbol'\n        x={x}\n        y={y}\n        width={SIZE}\n        height={SIZE}\n        href={url}\n      />\n    )\n  }\n}\n\nWeatherSymbol.propTypes = {\n  coordinates: PropTypes.instanceOf(ClockCoordinates),\n  symbol_code: PropTypes.string\n}\n\nexport default WeatherSymbol\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Display.css'\n\nimport ClockCoordinates from './ClockCoordinates'\n\nconst WIND_TEXT_RADIUS = 13\nconst WINDBOX_SCALE = 1.2\n\n/**\n * This is supposed to mimic a display on the clock face.\n */\nclass Display extends React.Component {\n  state = {\n    textWidth: 0,\n    textHeight: 0\n  }\n\n  constructor (props) {\n    super(props)\n    this.textRef = React.createRef()\n  }\n\n  componentDidMount = () => {\n    const boundingBox = this.textRef.current.getBBox()\n    this.setState({\n      textWidth: boundingBox.width,\n      textHeight: boundingBox.height\n    })\n  }\n\n  render = () => {\n    const x = this.props.coords.hourDx(WIND_TEXT_RADIUS)\n    const y = this.props.coords.hourDy(WIND_TEXT_RADIUS)\n\n    const rw = this.state.textWidth * WINDBOX_SCALE\n    const rh = this.state.textHeight * WINDBOX_SCALE\n\n    return (\n      <React.Fragment>\n        <rect x={x - rw / 2} y={y - rh / 2} width={rw} height={rh} rx='2' ry='2' className='wind' />\n        <text\n          ref={this.textRef}\n          x={x}\n          y={y}\n          className='wind'\n          dominantBaseline='middle'\n          textAnchor='middle'\n        >\n          {this.props.children}\n        </text>\n      </React.Fragment>\n    )\n  }\n}\n\nDisplay.propTypes = {\n  coordinates: PropTypes.instanceOf(ClockCoordinates)\n}\n\nexport default Display\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Temperature from './Temperature.js'\nimport WeatherSymbol from './WeatherSymbol.js'\nimport Display from './Display.js'\nimport ClockCoordinates from './ClockCoordinates.js'\n\n/**\n * This is what the clock shows after forecasts have been downloaded,\n * up to and including the hour and minute hands.\n */\nclass Weather extends React.Component {\n  renderTemperatures = renderUs => {\n    return renderUs\n      .filter(forecast => forecast.celsius !== undefined)\n      .map(forecast => {\n        const coords = new ClockCoordinates(forecast.timestamp)\n        return (\n          <Temperature\n            key={`hour-${coords.decimalHour}`}\n            coordinates={coords}\n            degreesCelsius={forecast.celsius}\n          />\n        )\n      })\n  }\n\n  renderWeathers = renderUs => {\n    return renderUs\n      .filter(forecast => forecast.symbol_code !== undefined)\n      .map(forecast => {\n        const coords = new ClockCoordinates(forecast.timestamp)\n\n        return (\n          <WeatherSymbol\n            key={`weather-${coords.decimalHour}`}\n            coordinates={coords}\n            symbol_code={forecast.symbol_code}\n          />\n        )\n      })\n  }\n\n  renderWindAndPrecipitation = renderUs => {\n    let precipitation_mm = 0\n    let minWind = null\n    let maxWind = null\n\n    renderUs.forEach(weather => {\n      if (minWind == null || minWind > weather.wind_m_s) {\n        minWind = weather.wind_m_s\n      }\n      if (maxWind == null || maxWind < weather.wind_m_s) {\n        maxWind = weather.wind_m_s\n      }\n      if (weather.precipitation_mm !== undefined) {\n        precipitation_mm += weather.precipitation_mm\n      }\n    })\n\n    minWind = Math.round(minWind)\n    maxWind = Math.round(maxWind)\n    const windString =\n      minWind === maxWind ? `${minWind} m/s` : `${minWind}-${maxWind} m/s`\n    console.debug(`Wind: ${windString}`)\n\n    const locale = navigator.language || navigator.userLanguage\n    const precipitationNumberString = new Intl.NumberFormat(locale, {\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 1\n    }).format(precipitation_mm)\n\n    const precipitationString = `${precipitationNumberString}mm`\n    console.debug(`Precipitation: ${precipitationString}`)\n\n    const nowCoords = new ClockCoordinates(this.props.now)\n    const bestDegrees = nowCoords.rankFreeDirections()\n\n    // Where do we draw the wind?\n    const windDegrees = bestDegrees[0]\n    const windCoords = new ClockCoordinates((12.0 * windDegrees) / 360.0)\n\n    const precipitationDegrees = bestDegrees[1]\n    const precipitationCoords = new ClockCoordinates(\n      (12.0 * precipitationDegrees) / 360.0\n    )\n\n    // FIXME: Render both wind and precipitation in the same display?\n    return (\n      <React.Fragment>\n        <Display coords={windCoords}>{windString}</Display>\n        <Display coords={precipitationCoords}>{precipitationString}</Display>\n      </React.Fragment>\n    )\n  }\n\n  getForecastsToRender = () => {\n    const renderUs = []\n\n    const now_ms = this.props.now.getTime()\n    const start = new Date(now_ms + 0.75 * 3600 * 1000)\n    const end = new Date(now_ms + 11.75 * 3600 * 1000)\n\n    for (const [timestamp_ms, forecast] of this.props.forecast.entries()) {\n      const timestamp_date = new Date(timestamp_ms)\n\n      if (timestamp_date < start) {\n        continue\n      }\n\n      if (timestamp_date > end) {\n        continue\n      }\n\n      renderUs.push(forecast)\n    }\n\n    console.debug(renderUs)\n    return renderUs\n  }\n\n  render = () => {\n    const renderUs = this.getForecastsToRender()\n    return (\n      <React.Fragment>\n        {this.renderTemperatures(renderUs)}\n        {this.renderWeathers(renderUs)}\n        {this.renderWindAndPrecipitation(renderUs)}\n      </React.Fragment>\n    )\n  }\n}\n\nWeather.propTypes = {\n  forecast: PropTypes.object,\n  now: PropTypes.instanceOf(Date)\n}\n\nexport default Weather\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Hand.css'\n\nclass Hand extends React.Component {\n  // FIXME: Hands should protrude 2 units in the wrong direction as well\n  render = () => {\n    return (\n      <React.Fragment>\n        <line\n          className='hand shadow'\n          x1='0'\n          y1='0'\n          x2={this.props.dx}\n          y2={this.props.dy}\n          strokeWidth={this.props.width}\n        />\n        <circle className='shadow' cx='0' cy='0' r='2' />\n\n        <line\n          className='hand'\n          x1='0'\n          y1='0'\n          x2={this.props.dx}\n          y2={this.props.dy}\n          strokeWidth={this.props.width}\n        />\n        <circle cx='0' cy='0' r='2' />\n      </React.Fragment>\n    )\n  }\n}\n\nHand.propTypes = {\n  width: PropTypes.number,\n  dx: PropTypes.number,\n  dy: PropTypes.number\n}\n\nexport default Hand\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\n\nclass Error extends React.Component {\n  render = () => {\n    // Inspired by: https://material-ui.com/components/dialogs/#alerts\n    return (\n      <Dialog\n        open\n        onClose={this.props.reload}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>{this.props.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>{this.props.children}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.reload} color='primary' autoFocus>\n            Retry\n          </Button>\n          {/* FIXME: Add button for reporting an issue? */}\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n\nError.propTypes = {\n  title: PropTypes.string.isRequired,\n  reload: PropTypes.func.isRequired\n}\n\nexport default Error\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CSS from 'csstype'\n\nimport NativeSelect from '@material-ui/core/NativeSelect'\n\ntype TimeSelectProps = {\n  daysFromNow: number // 0, 1 or 2 for how many days out we want\n  onSetStartTime: (startTime: NamedStartTime) => void\n}\n\n// From: https://stackoverflow.com/a/53930826/473672\nfunction capitalizeFirstLetter (s: string) {\n  const firstCodeUnit = s[0]\n\n  if (firstCodeUnit < '\\uD800' || firstCodeUnit > '\\uDFFF') {\n    return s[0].toUpperCase() + s.slice(1)\n  }\n\n  return s.slice(0, 2).toUpperCase() + s.slice(2)\n}\n\nexport class NamedStartTime {\n  private _startTime: Date\n  private _name: string\n  private _daysFromNow: number\n\n  constructor (daysFromNow: number) {\n    this._daysFromNow = daysFromNow\n\n    if (daysFromNow === 0) {\n      this._startTime = new Date()\n      this._name = 'Now'\n      return\n    }\n\n    let otherDay = new Date()\n    otherDay.setDate(otherDay.getDate() + daysFromNow /* days */)\n    otherDay.setHours(7)\n    otherDay.setMinutes(0)\n    otherDay.setSeconds(0)\n    otherDay.setMilliseconds(0)\n    this._startTime = otherDay\n\n    if (daysFromNow === 1) {\n      this._name = 'Tomorrow'\n      return\n    }\n\n    const dayname = otherDay.toLocaleDateString(navigator.language, {\n      weekday: 'long'\n    })\n\n    this._name = capitalizeFirstLetter(dayname)\n  }\n\n  get name (): string {\n    return this._name\n  }\n\n  get startTime (): Date {\n    return this._startTime\n  }\n\n  get daysFromNow (): number {\n    return this._daysFromNow\n  }\n}\n\nclass TimeSelect extends React.Component<TimeSelectProps, {}> {\n  static propTypes = {\n    onSetStartTime: PropTypes.func.isRequired,\n    daysFromNow: PropTypes.number.isRequired\n  }\n\n  render = () => {\n    const topRight: CSS.Properties = {\n      position: 'absolute',\n      right: '0px',\n      top: '0px'\n    }\n\n    // Populate select\n    let options = []\n    for (let i = 0; i < 3; i++) {\n      const namedStartTime = new NamedStartTime(i)\n      const name = namedStartTime.name\n      options.push(\n        <option key={name} value={String(i)}>\n          {name}\n        </option>\n      )\n    }\n\n    // Inspired by: https://material-ui.com/components/selects/#native-select\n    return (\n      <NativeSelect\n        style={topRight}\n        value={this.props.daysFromNow}\n        onChange={this.onChange}\n      >\n        {options}\n      </NativeSelect>\n    )\n  }\n\n  onChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.onSetStartTime(new NamedStartTime(parseInt(event.target.value)))\n  }\n}\n\nexport default TimeSelect\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ReactGA from 'react-ga'\n\nimport './Clock.css'\n\nimport Weather from './Weather.js'\nimport Hand from './Hand.js'\nimport Error from './Error.js'\nimport ClockCoordinates from './ClockCoordinates.js'\nimport TimeSelect, { NamedStartTime } from './TimeSelect'\n\nconst HOUR_HAND_LENGTH = 23\nconst MINUTE_HAND_LENGTH = 34\n\n/** Cache positions for this long */\nconst POSITION_CACHE_MS = 5 * 60 * 1000\n\n/** Cache forecasts for this long */\nconst FORECAST_CACHE_MS = 2 * 60 * 60 * 1000\n\n/** If we move less than this, assume forecast is still valid */\nconst FORECAST_CACHE_KM = 5\n\ntype ClockProps = {\n  startTime: NamedStartTime\n  reload: () => void\n  onSetStartTime: (startTime: NamedStartTime) => void\n}\n\ntype ClockState = {\n  startTime: NamedStartTime\n\n  error?: JSX.Element\n  progress?: JSX.Element\n\n  position?: {\n    latitude: number\n    longitude: number\n  }\n  positionTimestamp?: Date\n\n  forecast?: Map<number, Forecast>\n  forecastMetadata?: {\n    // FIXME: Rather than the current timestamp, maybe track when yr.no\n    // thinks the next forecast will be available? That information is\n    // available in the XML.\n    timestamp: Date\n    latitude: number\n    longitude: number\n  }\n}\n\ntype Forecast = {\n  timestamp: Date // Middle of the span\n  span_h: number // Width of the span in hours\n  celsius?: number // The forecasted temperatures in centigrades\n  wind_m_s?: number // The forecasted wind speed in m/s\n  symbol_code?: string // The weather symbol code. Resolve using public/api-met-no-weathericons/png/SYMBOL_CODE.png\n  precipitation_mm?: number\n}\n\nclass Clock extends React.Component<ClockProps, ClockState> {\n  static propTypes = {\n    startTime: PropTypes.instanceOf(NamedStartTime).isRequired,\n    reload: PropTypes.func.isRequired,\n    onSetStartTime: PropTypes.func.isRequired\n  }\n\n  constructor (props: ClockProps) {\n    super(props)\n\n    this.state = this._getInitialState()\n  }\n\n  _getInitialState = (): ClockState => {\n    if (navigator.geolocation) {\n      // FIXME: Invalidate forecast if it's too old (and decide what \"too old\" means)\n      return {\n        startTime: this.props.startTime,\n        progress: undefined,\n        error: undefined\n      }\n    }\n\n    ReactGA.exception({\n      description: 'Geolocation unsupported',\n      fatal: true\n    })\n\n    return {\n      startTime: this.props.startTime,\n      progress: undefined,\n\n      // FIXME: Add a link for contacting me with browser information\n      error: (\n        <Error title='Geolocation unsupported' reload={this.props.reload}>\n          Please try <a href='https://getfirefox.com'>another browser</a>.\n        </Error>\n      )\n    }\n  }\n\n  componentDidMount = () => {\n    this.startGeolocationIfNeeded()\n  }\n\n  componentDidUpdate = () => {\n    if (this.props.startTime.startTime !== this.state.startTime.startTime) {\n      this.setState(this._getInitialState())\n    }\n\n    if (this.startGeolocationIfNeeded()) {\n      // If / when we get the new position, that will in turn trigger a forecast\n      // update, so our work here is done.\n      return\n    }\n\n    if (this.state.progress) {\n      // Something is already happening, don't interrupt it by getting a new forecast\n      return\n    }\n\n    if (this.forecastIsCurrent()) {\n      // Forecast already current, never mind\n      return\n    }\n\n    this.download_weather()\n  }\n\n  startGeolocationIfNeeded = () => {\n    if (this.state.progress) {\n      // Something is already in progress, never mind\n      return false\n    }\n\n    if (this.state.error) {\n      // Something has gone wrong, never mind\n      return false\n    }\n\n    if (this.state.position) {\n      const position_age_ms =\n        Date.now() - this.state.positionTimestamp!.getTime()\n\n      if (position_age_ms < POSITION_CACHE_MS) {\n        // Already know where we are, never mind\n        console.debug(`Retaining cached position of ${position_age_ms}ms age`)\n        return false\n      }\n    }\n\n    console.log('Geolocating...')\n    this.setState({\n      progress: <text className='progress'>Locating phone...</text>\n    })\n    navigator.geolocation.getCurrentPosition(this.setPosition, this.geoError)\n\n    return true\n  }\n\n  setPosition = (position: Position) => {\n    const latitude = position.coords.latitude\n    const longitude = position.coords.longitude\n    console.log(`got position: ${latitude} ${longitude}`)\n\n    this.setState({\n      position: position.coords,\n      positionTimestamp: new Date()\n    })\n\n    if (!this.forecastIsCurrent()) {\n      this.download_weather()\n    }\n  }\n\n  // From: https://stackoverflow.com/a/27943/473672\n  getDistanceFromLatLonInKm = (\n    lat1: number,\n    lon1: number,\n    lat2: number,\n    lon2: number\n  ) => {\n    const EARTH_RADIUS_KM = 6371\n    const dLat = this.deg2rad(lat2 - lat1)\n    const dLon = this.deg2rad(lon2 - lon1)\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.deg2rad(lat1)) *\n        Math.cos(this.deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n\n    return EARTH_RADIUS_KM * c\n  }\n\n  deg2rad = (deg: number) => {\n    return deg * (Math.PI / 180)\n  }\n\n  forecastIsCurrent = () => {\n    if (!this.state.forecast) {\n      // No forecast at all, that's not current\n      return false\n    }\n\n    const metadata = this.state.forecastMetadata!\n    const ageMs = Date.now() - metadata.timestamp.getTime()\n    if (ageMs > FORECAST_CACHE_MS) {\n      // Forecast too old, that's not current\n      return false\n    }\n\n    const kmDistance = this.getDistanceFromLatLonInKm(\n      metadata.latitude,\n      metadata.longitude,\n      this.state.position!.latitude,\n      this.state.position!.longitude\n    )\n    if (kmDistance > FORECAST_CACHE_KM) {\n      // Forecast from too far away, that's not current\n      return false\n    }\n\n    console.debug(\n      `Forecast considered current: ${ageMs}ms old and ${kmDistance}km away`\n    )\n    return true\n  }\n\n  download_weather = () => {\n    const latitude = this.state.position!.latitude\n    const longitude = this.state.position!.longitude\n\n    this.setState({\n      progress: <text className='progress'>Downloading weather...</text>\n    })\n\n    const url = `https://europe-west2-api-met-no-proxy.cloudfunctions.net/api-met-no-proxy/locationforecast/2.0/classic?lat=${latitude};lon=${longitude}`\n    console.log('Getting weather from: ' + url)\n\n    const self = this\n\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Response code from upstream: ${response.status}`)\n        }\n        return response.text()\n      })\n      .then(weatherXmlString => {\n        const forecast = self.parseWeatherXml(weatherXmlString)\n\n        self.setState({\n          forecast: forecast,\n          forecastMetadata: {\n            timestamp: new Date(),\n            latitude: latitude,\n            longitude: longitude\n          }\n        })\n      })\n      .catch(error => {\n        console.error(error)\n\n        ReactGA.exception({\n          description: `Downloading weather failed: ${error.message}`,\n          fatal: !this.state.forecast\n        })\n\n        this.setState({\n          error: (\n            <Error\n              title='Downloading weather failed'\n              reload={this.props.reload}\n            >\n              {error.message}\n            </Error>\n          )\n        })\n      })\n  }\n\n  /* Parses weather XML from yr.no into a weather object that maps timestamps (in\n   * milliseconds since the epoch) to forecasts. */\n  parseWeatherXml = (weatherXmlString: string): Map<number, Forecast> => {\n    const weatherXml = new window.DOMParser().parseFromString(\n      weatherXmlString,\n      'text/xml'\n    )\n    const allPrognoses = weatherXml.getElementsByTagName('time')\n    console.log('Parsing ' + allPrognoses.length + ' prognoses...')\n\n    const forecasts: Map<number, Forecast> = new Map()\n    for (let i = 0; i < allPrognoses.length; i++) {\n      const prognosis = allPrognoses[i]\n\n      const from = new Date(prognosis.attributes.getNamedItem('from')!.value)\n      const to = new Date(prognosis.attributes.getNamedItem('to')!.value)\n      const dh = (to.getTime() - from.getTime()) / (3600 * 1000)\n      const timestamp = new Date((from.getTime() + to.getTime()) / 2)\n\n      let forecast = forecasts.get(timestamp.getTime())\n      if (forecast !== undefined && forecast.span_h <= dh) {\n        // There's already higher resolution data here\n        continue\n      }\n\n      if (!forecast) {\n        forecast = {\n          timestamp: timestamp,\n          span_h: dh\n        }\n      }\n\n      const symbolNodes = prognosis.getElementsByTagName('symbol')\n      if (symbolNodes && symbolNodes.length > 0) {\n        const symbol_code = symbolNodes[0].attributes.getNamedItem('code')!.value\n        forecast.symbol_code = symbol_code\n      }\n\n      const celsiusNodes = prognosis.getElementsByTagName('temperature')\n      if (celsiusNodes && celsiusNodes.length > 0) {\n        const celsiusValue = celsiusNodes[0].attributes.getNamedItem('value')!\n          .value\n        forecast.celsius = parseFloat(celsiusValue)\n      }\n\n      const windNodes = prognosis.getElementsByTagName('windSpeed')\n      if (windNodes && windNodes.length > 0) {\n        const windValue = windNodes[0].attributes.getNamedItem('mps')!.value\n        forecast.wind_m_s = parseFloat(windValue)\n      }\n\n      const precipitationNodes = prognosis.getElementsByTagName('precipitation')\n      if (precipitationNodes && precipitationNodes.length > 0) {\n        const maxAttribute = precipitationNodes[0].attributes.getNamedItem(\n          'maxvalue'\n        )!\n        const expectedAttribute = precipitationNodes[0].attributes.getNamedItem(\n          'value'\n        )!\n        const precipitationValue =\n          maxAttribute === undefined\n            ? expectedAttribute.value\n            : maxAttribute.value\n        forecast.precipitation_mm = parseFloat(precipitationValue)\n      }\n\n      forecasts.set(timestamp.getTime(), forecast)\n    }\n\n    console.log(forecasts)\n    return forecasts\n  }\n\n  geoError = (error: PositionError) => {\n    console.log('Geolocation failed')\n    ReactGA.exception({\n      description: `Geolocation failed: ${error.message}`,\n      fatal: !this.state.forecast\n    })\n    this.setState({\n      // FIXME: Add a report-problem link?\n      // FIXME: Make the error message text clickable and link it to a Google search\n      // Reload trickery from: https://stackoverflow.com/a/10840058/473672\n\n      // Note that at least on desktop Firefox 69.0 for Mac, this JS-triggered reload\n      // won't re-ask the positioning question, but if the user manually reloads that\n      // will re-ask the question.\n      error: (\n        <Error\n          title={error.message}\n          reload={window.location.reload.bind(window.location, true)}\n        >\n          If you are asked whether to allow the Weather Clock to know your\n          current location, please say \"yes\".\n        </Error>\n      )\n    })\n  }\n\n  renderHands = () => {\n    const nowCoords = new ClockCoordinates(this.state.startTime.startTime)\n\n    // FIXME: This doubles the center circle shadow, maybe draw\n    // the center circle once here to get us only one of those?\n    return (\n      <React.Fragment>\n        <Hand\n          width={2.5}\n          dx={nowCoords.hourDx(HOUR_HAND_LENGTH)}\n          dy={nowCoords.hourDy(HOUR_HAND_LENGTH)}\n        />\n        <Hand\n          width={2}\n          dx={nowCoords.minuteDx(MINUTE_HAND_LENGTH)}\n          dy={nowCoords.minuteDy(MINUTE_HAND_LENGTH)}\n        />\n      </React.Fragment>\n    )\n  }\n\n  render = () => {\n    return (\n      <React.Fragment>\n        <svg\n          id='weatherclock'\n          xmlns='http://www.w3.org/2000/svg'\n          version='1.1'\n          viewBox='-50 -50 100 100'\n        >\n          <image\n            x='-50'\n            y='-50'\n            width='100'\n            height='100'\n            xlinkHref={process.env.PUBLIC_URL + '/clock-frame.png'}\n          />\n\n          {this.getClockContents()}\n        </svg>\n        {this.state.error}\n        {this.state.forecast ? (\n          <TimeSelect\n            daysFromNow={this.props.startTime.daysFromNow}\n            onSetStartTime={this.props.onSetStartTime}\n          />\n        ) : null}\n      </React.Fragment>\n    )\n  }\n\n  getClockContents = () => {\n    if (this.state.forecast) {\n      if (this.props.startTime.daysFromNow !== 0) {\n        return (\n          <React.Fragment>\n            <Weather\n              forecast={this.state.forecast}\n              now={this.state.startTime.startTime}\n            />\n            <text className='tomorrow'>{this.state.startTime.name}</text>\n          </React.Fragment>\n        )\n      } else {\n        // Now\n        return (\n          <React.Fragment>\n            <Weather\n              forecast={this.state.forecast}\n              now={this.state.startTime.startTime}\n            />\n            {this.renderHands()}\n          </React.Fragment>\n        )\n      }\n    }\n\n    if (this.state.error) {\n      // These hands will show up behind the error dialog\n      return this.renderHands()\n    }\n\n    if (this.state.progress) {\n      return this.state.progress\n    }\n\n    // Most likely the initial state\n    return null\n  }\n}\n\nexport default Clock\n","import assert from 'assert'\n\nimport React from 'react'\nimport './App.css'\n\nimport Clock from './Clock'\nimport { NamedStartTime } from './TimeSelect'\n\nimport PageVisibility from 'react-page-visibility'\n\nimport ReactGA from 'react-ga'\nif (process.env.NODE_ENV === 'production') {\n  // To prevent bad data from dev and test runs we only enable Google Analytics\n  // in production\n  ReactGA.initialize('UA-59702036-2')\n\n  // IPs are personally identifiable according to GDPR:\n  // https://eugdprcompliant.com/personal-data/\n  ReactGA.set({ anonymizeIp: true })\n}\nReactGA.pageview(window.location.pathname + window.location.search)\n\ntype AppState = {\n  startTime: NamedStartTime\n}\n\nclass App extends React.Component<{}, AppState> {\n  state = {\n    startTime: new NamedStartTime(0)\n  }\n\n  setTimeToNow = () => {\n    this.setState({\n      startTime: new NamedStartTime(0)\n    })\n  }\n\n  handleVisibilityChange = (isVisible: boolean) => {\n    console.debug(`Page visibility changed: ${isVisible}`)\n    if (isVisible) {\n      this.setTimeToNow()\n    }\n  }\n\n  onSetStartTime = (startTime: NamedStartTime) => {\n    assert(startTime)\n    this.setState({\n      startTime: startTime\n    })\n  }\n\n  render = () => {\n    return (\n      <PageVisibility onChange={this.handleVisibilityChange}>\n        <div className='App'>\n          <Clock\n            startTime={this.state.startTime}\n            reload={this.setTimeToNow}\n            onSetStartTime={this.onSetStartTime}\n          />\n\n          {/*\n          If you add a Weatherclock launcher to your home screen on an iPhone,\n          the page opened will not be in a web-browser (or at least look like\n          it's not).\n\n          So we add a reload button of our own here.\n          */}\n          <button type='button' onClick={this.setTimeToNow}>\n            Update forecast\n          </button>\n\n          <p>\n            Weather forecast from <a href='yr.no'>yr.no</a>, delivered by the{' '}\n            <a href='https://met.no/English/'>\n              Norwegian Meteorological Institute\n            </a>{' '}\n            and the <a href='https://www.nrk.no/'>NRK</a>.\n          </p>\n\n          <p>\n            <a\n              href={`https://github.com/walles/weatherclock/tree/${process.env.REACT_APP_GIT_SHA}`}\n            >\n              Source code on GitHub\n            </a>\n          </p>\n        </div>\n      </PageVisibility>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// Redirect to https, this helps with positioning in some circumstances\nconst protocol = window.location.protocol\nif (protocol === 'http:' && window.location.hostname !== 'localhost') {\n  // From http://stackoverflow.com/a/4723302/473672\n  window.location.href = 'https:' + window.location.href.substring(protocol.length)\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'))\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister()\n}\n"],"sourceRoot":""}